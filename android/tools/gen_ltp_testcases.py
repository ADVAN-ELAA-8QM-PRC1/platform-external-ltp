#!/usr/bin/env python
#
# Copyright 2016 - The Android Open Source Project
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

# For each testsuite, generates a declaration in the form
#
# 	LTP_TESTSUITE(testsuite);
#
# And for each testcase, generates a declaration in the form
#
# 	LTP_TESTCASE(testsuite, testcase, test_executable);
# or
# 	LTP_TESTCASE(testsuite, testcase, test_executable, {"arg1", "arg2"});
#
# These declarations are C++ macros which will be turned into actual
# gTest classes in the gTest driver.

from __future__ import print_function

import argparse
import fileinput
import os
import sys

def read_commented_txt(filename):
    """Read a lines of a file that are not commented by #."""
    ret = set()
    if not filename:
        return ret

    with open(filename, 'r') as f:
        for line in f.readlines():
            s = line.strip()
            if s and not s.startswith('#'):
                ret.add(s)

    return ret


def generate_ltp_testcase(line, testsuite, ltp_root, disabled_tests, disabled_gtests, output_format):
    """Generate test cases for each test case input."""
    s = line.split()
    testname = s[0]
    testexe = s[1]
    args = s[2:]

    testname_prefix = 'DISABLED_' if testname in disabled_gtests or testname in disabled_tests else ''

    # The testname becomes a C++ class name, which can't have hyphens
    testname = testname_prefix + testname.replace('-', '_')

    if output_format == 'cpp':
        if args:
            cmdline = ', '.join('\"{}\"'.format(i) for i in args)
            print('LTP_TESTCASE({}, {}, {}, {{{}}});'.format(testsuite, testname,
                                                             testexe, cmdline))
        else:
            print('LTP_TESTCASE({}, {}, {});'.format(testsuite, testname, testexe))
    elif output_format == 'py':
        print("\t".join([testsuite, testname, testexe, ','.join(args)]))



def generate_ltp_testsuite(testsuite, ltp_root, disabled_tests,
                           disabled_gtests, output_format):
    """Generate test cases for each ltp test suite input."""
    testsuite_script = os.path.join(ltp_root, 'runtest', testsuite)
    testsuite = testsuite.replace('-', '_')

    if output_format == 'cpp':
        print('LTP_TESTSUITE({});'.format(testsuite))
    elif output_format == 'py':
        print('// The following test cases are generated from LTP TESTSUITE: {}'.format(testsuite))

    for line in open(testsuite_script, 'r'):
        l = line.strip()
        if not l or l[0] == '#':
            continue

        generate_ltp_testcase(l, testsuite, ltp_root, disabled_tests,
                              disabled_gtests, output_format)


def main():
    parser = argparse.ArgumentParser(description = 'Generate ltp-testcases.h from an LTP test scenario')
    parser.add_argument('infile', nargs = '?', default = '-')
    parser.add_argument('--ltp-root', dest = 'ltp_root', required = True,
                    help = 'location of LTP root directory')
    parser.add_argument('--disabled-tests', dest = 'disabled_tests',
                    help = 'file with a list of disabled tests')
    parser.add_argument('--disabled-gtests', dest = 'disabled_gtests',
                    help = 'file with a list of tests that should be prefixed with DISABLED_')
    parser.add_argument('--output_format', dest = 'output_format',
                    help = 'output_format: "cpp" for cpp target side gtest version, ' \
                           '"py" for python host side vts version ')

    args = parser.parse_args()
    script_name = os.path.basename(sys.argv[0])
    disabled_tests = read_commented_txt(args.disabled_tests)
    disabled_gtests = read_commented_txt(args.disabled_gtests)

    ltp_testsuites = [i.strip() for i in fileinput.input(args.infile)]
    # HACK
    if 'controllers' in ltp_testsuites:
        ltp_testsuites.remove('controllers')

    # TODO(yuexima): net.ipv6_lib

    print('// This file autogenerated by {}'.format(script_name))
    print('')

    for testsuite in ltp_testsuites:
        generate_ltp_testsuite(testsuite, args.ltp_root, disabled_tests,
                               disabled_gtests, args.output_format)

if __name__ == '__main__':
    main()
